.header-icon-skeleton {
  display: flex;
  flex-flow: nowrap;
  justify-content: flex-end;
}
.icon-skeleton {
  border-radius: 50%;
  height: 32px;
  width: 32px;
  margin: 0 8px;
  background-color: hsl(0, 0%, 89%);
}

.grid-video-skeleton {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  /* justify-content: center; */
}
.video-skeleton {
  margin: 0 16px 0 0;
  flex-basis: 320px;
  min-width: 320px;
  max-width: 360px;
  flex-grow: 1;
}
.video-details {
  display: flex;
  flex-direction: column;
}
.rich-thumbnail {
  position: relative;
  width: 100%;
  background-color: hsl(0, 0%, 89%);
}
.rich-thumbnail:before {
  display: block;
  content: "";
  width: 100%;
  padding-top: 56.25%; /* this will keep the aspect-ratio always 16:9, no matter the width of the parent */
  background-color: rgba(0, 0, 0, 0.1);
}
.rich-video-title {
  width: 90%;
  height: 20px;
  margin: 10px 0;
  background-color: hsl(0, 0%, 89%);
}
.rich-video-meta {
  width: 60%;
  height: 20px;
  margin: 10px 0;
  background-color: hsl(0, 0%, 89%);
}

@media only screen and (max-width: 1631px) and (min-width: 720px) {
  .video-skeleton {
    flex-basis: 240px;
    min-width: 240px;
    max-width: 320px;
  }
}

/*  ------------------------ */
/* 
Animated skeleton screen using CSS.

Create shapes using gradients that simulate solids.

Use `:empty` pseduo-class to show skeleton screen background only while container has no content (ex: for the "loading" state). When content is added to the container element, the pseudo-class selector won't match anymore and the skeleton screen will be removed automatically; no need to toggle a separate class on the container.

See: https://developer.mozilla.org/en-US/docs/Web/CSS/:empty

Animating one layer of the background which is a tilted linear gradient with white in the middle to achieve shine effect.
*/
.auto:empty {
  margin: auto;
  width: 500px;
  height: 600px; /* change height to see repeat-y behavior */

  background-image:
    radial-gradient(circle 50px at 50px 50px, lightgray 99%, transparent 0),
    linear-gradient(100deg, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0.5) 50%, rgba(255, 255, 255, 0) 80%),
    linear-gradient(lightgray 20px, transparent 0),
    linear-gradient(lightgray 20px, transparent 0),
    linear-gradient(lightgray 20px, transparent 0),
    linear-gradient(lightgray 20px, transparent 0);

  background-repeat: repeat-y;

  background-size: 
    100px 200px, /* circle */ 
    50px 200px, /* highlight */ 
    150px 200px, 
    350px 200px, 
    300px 200px, 
    250px 200px;

  background-position: 
    0 0, /* circle */
    0 0, /* highlight */
    120px 0,
    120px 40px, 
    120px 80px,
    120px 120px;

  animation: shine 1s infinite;
}

@keyframes shine {
  to {
    background-position: 
      0 0, 
      100% 0, /* move just highlight to right */
      120px 0,
      120px 40px,
      120px 80px,
      120px 120px;
  }
}
